/*
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.9.5 spattered-kelvin
 * Contact: dev@lab5e.com
 * Generated by: https://openapi-generator.tech
 */

/// CollectionStats : This is statistics for an collection.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CollectionStats {
    #[serde(rename = "deviceCount", skip_serializing_if = "Option::is_none")]
    pub device_count: Option<i32>,
    #[serde(rename = "outputCount", skip_serializing_if = "Option::is_none")]
    pub output_count: Option<i32>,
    #[serde(rename = "firmwareCount", skip_serializing_if = "Option::is_none")]
    pub firmware_count: Option<i32>,
    #[serde(rename = "blobCount", skip_serializing_if = "Option::is_none")]
    pub blob_count: Option<i32>,
    #[serde(rename = "gatewayCount", skip_serializing_if = "Option::is_none")]
    pub gateway_count: Option<i32>,
    #[serde(rename = "devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<Box<crate::models::DeviceStats>>,
    #[serde(rename = "outputs", skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Box<crate::models::OutputStats>>,
    #[serde(rename = "firmware", skip_serializing_if = "Option::is_none")]
    pub firmware: Option<Box<crate::models::FirmwareStats>>,
    #[serde(rename = "blobs", skip_serializing_if = "Option::is_none")]
    pub blobs: Option<Box<crate::models::BlobStats>>,
    #[serde(rename = "gateways", skip_serializing_if = "Option::is_none")]
    pub gateways: Option<Box<crate::models::GatewayStats>>,
}

impl CollectionStats {
    /// This is statistics for an collection.
    pub fn new() -> CollectionStats {
        CollectionStats {
            device_count: None,
            output_count: None,
            firmware_count: None,
            blob_count: None,
            gateway_count: None,
            devices: None,
            outputs: None,
            firmware: None,
            blobs: None,
            gateways: None,
        }
    }
}
